/**
 * Slideshow backend script
 *
 * @author Stefan Boonstra
 * @version 2.2.12
 */
slideshow_jquery_image_gallery_backend_script = function()
{
	var $    = jQuery,
		self = {};

	self.isBackendInitialized = false;

	/**
	 * Called by either jQuery's document ready event or JavaScript's window load event in case document ready fails to
	 * fire.
	 *
	 * Triggers the slideshowBackendReady on the document to inform all backend scripts they can start.
	 */
	self.init = function()
	{
		if (self.isBackendInitialized)
		{
			return;
		}

		self.isBackendInitialized = true;

		$(document).trigger('slideshowBackendReady');
	};

	$(document).ready(self.init);

	$(window).load(self.init);

	return self;
}();






///**
// * Simple logging function for Internet Explorer
// *
// * @param message
// */
//function log(message)
//{
//	var $ = jQuery;
//
//	$('body').prepend('<p style="color: red;">' + message +  '</p>');
//}

slideshow_jquery_image_gallery_backend_script.generalSettings = function()
{
	var $    = jQuery,
		self = { };

	self.isCurrentPage = false;

	/**
	 *
	 */
	self.init = function()
	{
		if (window.pagenow === 'slideshow_page_general_settings')
		{
			self.isCurrentPage = true;

			self.activateUserCapabilities();
		}
	};

	/**
	 * When either the 'Add slideshows' capability or the 'Delete slideshow' capability is changed, the 'Edit slideshows'
	 * checkbox should also be checked. Un-checking the 'Edit slideshows' checkbox needs to do the opposite.
	 */
	self.activateUserCapabilities = function()
	{
		$('.general-settings-capability-checkbox').change(function(event)
		{
			var $this                            = $(event.currentTarget),
				addSlideshowsCapability          = 'slideshow-jquery-image-gallery-add-slideshows',
				editSlideshowsCapability         = 'slideshow-jquery-image-gallery-edit-slideshows',
				deleteSlideshowsCapability       = 'slideshow-jquery-image-gallery-delete-slideshows',
				addSettingsProfilesCapability    = 'slideshow-jquery-image-gallery-add-settings-profiles',
				editSettingsProfilesCapability   = 'slideshow-jquery-image-gallery-edit-settings-profiles',
				deleteSettingsProfilesCapability = 'slideshow-jquery-image-gallery-delete-settings-profiles',
				idArray,
				capability,
				role;

			// Check if the type was a checkbox
			if ($this.attr('type').toLowerCase() != 'checkbox')
			{
				return;
			}

			// Get capability and role
			idArray    = $this.attr('id').split('_');
			capability = idArray.shift();
			role       = idArray.join('_');

			// When 'Edit slideshows' has been un-checked, set 'Add slideshows' and 'Delete slideshows' to un-checked as well
			if (capability === editSlideshowsCapability &&
				!$this.attr('checked'))
			{
				$('#' + addSlideshowsCapability    + '_' + role).attr('checked', false);
				$('#' + deleteSlideshowsCapability + '_' + role).attr('checked', false);
			}
			// When 'Add slideshows' or 'Delete slideshows' is checked, 'Edit slideshows' must be checked as well
			else if (capability === addSlideshowsCapability ||
					 capability === deleteSlideshowsCapability)
			{
				$('#' + editSlideshowsCapability + '_' + role).attr('checked', true);
			}
			console.log(capability, role, editSettingsProfilesCapability, capability === editSettingsProfilesCapability);
			// When 'Edit settings profiles' has been un-checked, set 'Add settings profiles' and 'Delete settings profiles' to un-checked as well
			if (capability === editSettingsProfilesCapability &&
				!$this.attr('checked'))
			{
				$('#' + addSettingsProfilesCapability    + '_' + role).attr('checked', false);
				$('#' + deleteSettingsProfilesCapability + '_' + role).attr('checked', false);
			}
			// When 'Add settings profiles' or 'Delete settings profiles' is checked, 'Edit settings profiles' must be checked as well
			else if (capability === addSettingsProfilesCapability ||
				capability === deleteSettingsProfilesCapability)
			{
				$('#' + editSettingsProfilesCapability + '_' + role).attr('checked', true);
			}
		});
	};

	$(document).bind('slideshowBackendReady', self.init);

	return self;
}();




slideshow_jquery_image_gallery_backend_script.generalSettings.customStyles = function()
{
	var $    = jQuery,
		self = { };

	/**
	 *
	 */
	self.init = function()
	{
		if (!slideshow_jquery_image_gallery_backend_script.generalSettings.isCurrentPage)
		{
			return;
		}

		self.activateNavigation();
	};

	/**
	 * Binds functions to fire at click events on the navigation tabs
	 */
	self.activateNavigation = function()
	{
		// On click of navigation tab, show different settings page.
		$('.nav-tab').click(function(event)
		{
			var $this      = $(event.currentTarget),
				$activeTab = $('.nav-tab-active'),
				$referrer;

			$activeTab.removeClass('nav-tab-active');
			$this.addClass('nav-tab-active');

			// Hide previously active tab's content
			$($activeTab.attr('href').replace('#', '.')).hide();

			// Show newly activated tab
			$($this.attr('href').replace('#', '.')).show();

			// Set referrer value to the current page to be able to return there after saving
			$referrer = $('input[name=_wp_http_referer]');
			$referrer.attr('value', $referrer.attr('value').split('#').shift() + $this.attr('href'));
		});

		// Navigate to correct tab by firing a click event on it. Click event needs to have already been registered on '.nav-tab'.
		$('a[href="#' + document.URL.split('#').pop() + '"]').trigger('click');
	};

	$(document).bind('slideshowBackendReady', self.init);

	return self;
}();
slideshow_jquery_image_gallery_backend_script.generalSettings.customStyles = function()
{
	var $    = jQuery,
		self = { };

	/**
	 *
	 */
	self.init = function()
	{
		if (!slideshow_jquery_image_gallery_backend_script.generalSettings.isCurrentPage)
		{
			return;
		}

		self.activateActionButtons();
		self.activateDeleteButtons();
	};

	/**
	 * Activate action buttons.
	 */
	self.activateActionButtons = function()
	{
		// On click of the customize default style button
		$('.custom-styles-tab .styles-list .style-action.style-default').click(function(event)
		{
			var $this                 = $(event.currentTarget),
				title                 = $this.closest('li').find('.style-title').html(),
				content               = $this.closest('li').find('.style-content').html(),
				externalData          = window.slideshow_jquery_image_gallery_backend_script_generalSettings,
				customStylesKey       = 'slideshow-jquery-image-gallery-custom-styles',
				customStyleID,
				$editor,
				$li,
				$customStyleTemplates,
				$customStylesList;

			if (typeof content !== 'string' ||
				content.length <= 0)
			{
				return;
			}

			if (typeof externalData === 'object')
			{
				// Prefix title with 'New'
				if (typeof externalData.localization === 'object' &&
					externalData.localization.newCustomizationPrefix !== undefined &&
					externalData.localization.newCustomizationPrefix.length > 0)
				{
					title = externalData.localization.newCustomizationPrefix + ' - ' + title;
				}

				// Get custom styles key
				if (typeof externalData.data === 'object' &&
					externalData.data.customStylesKey !== undefined &&
					externalData.data.customStylesKey.length > 0)
				{
					customStylesKey = externalData.data.customStylesKey;
				}
			}

			customStyleID = customStylesKey + '_' + (self.getHighestCustomStyleID() + 1);

			$customStyleTemplates = $('.custom-styles-tab .custom-style-templates');

			// Clone editor template
			$editor =  $customStyleTemplates.find('.style-editor').clone();

			// Add class to editor
			$editor.addClass(customStyleID);

			// Add value attributes
			$editor.find('.new-custom-style-title').attr('value', title);
			$editor.find('.new-custom-style-content').html(content);

			// Add name attributes
			$editor.find('.new-custom-style-title').attr('name', customStylesKey + '[' + customStyleID + '][title]');
			$editor.find('.new-custom-style-content').attr('name', customStylesKey + '[' + customStyleID + '][style]');

			// Add editor to DOM
			$('.custom-styles-tab .style-editors').append($editor);

			// Fade editor in
			setTimeout(
				function()
				{
					$editor.fadeIn(200);
				},
				200
			);

			// Clone custom styles list item (with events)
			$li = $customStyleTemplates.find('.custom-styles-list-item').clone(true);

			// Prepare
			$li.removeClass('custom-styles-list-item');
			$li.find('.style-title').html(title);
			$li.find('.style-action').addClass(customStyleID);
			$li.find('.style-delete').addClass(customStyleID);

			$customStylesList = $('.custom-styles-tab .styles-list .custom-styles-list');

			// Remove 'No custom stylesheets found message'
			$customStylesList.find('.no-custom-styles-found').remove();

			// Add custom styles list item to DOM
			$customStylesList.append($li);
		});

		// On click of the edit custom style button
		$('.custom-styles-tab .styles-list .style-action, .custom-styles-tab .custom-style-templates .custom-styles-list-item .style-action').click(function(event)
		{
			// Get custom style key
			var customStyleKey = $(event.currentTarget).attr('class').split(' ')[1];

			// Return if no style key was found
			if (customStyleKey === undefined)
			{
				return;
			}

			// Fade editors out
			$('.custom-styles-tab .style-editors .style-editor').each(function(key, editor)
			{
				$(editor).fadeOut(200);
			});

			// Fade active editor in
			setTimeout(
				function()
				{
					$('.style-editor.' + customStyleKey).fadeIn(200);
				},
				200
			);
		});
	};

	/**
	 * Activate delete buttons.
	 */
	self.activateDeleteButtons = function()
	{
		$('.custom-styles-tab .styles-list .style-delete, .custom-styles-tab .custom-style-templates .custom-styles-list-item .style-delete').click(function(event)
		{
			// Get custom style key
			var $this                = $(event.currentTarget),
				customStyleKey       = $this.attr('class').split(' ')[1],
				externalData         = window.slideshow_jquery_image_gallery_backend_script_generalSettings,
				confirmDeleteMessage = 'Are you sure you want to delete this custom style?';

			// Return if no style key was found
			if(customStyleKey === undefined)
			{
				return;
			}

			if (typeof externalData === 'object' &&
				typeof externalData.localization === 'object' &&
				externalData.localization.confirmDeleteMessage !== undefined &&
				externalData.localization.confirmDeleteMessage.length > 0)
			{
				confirmDeleteMessage = externalData.localization.confirmDeleteMessage;
			}

			// Show confirm deletion message
			if (!confirm(confirmDeleteMessage))
			{
				return;
			}

			// Delete custom style
			$('.custom-styles-tab .style-editors .style-editor.' + customStyleKey).remove();

			// Delete item from list
			$this.closest('li').remove();
		});
	};

	/**
	 * Returns highest custom style id in existence
	 *
	 * @return int highestCustomStyleID
	 */
	self.getHighestCustomStyleID = function()
	{
		var highestCustomStyleID = 0;

		// Loop through style editors
		$('.custom-styles-tab .style-editors .style-editor').each(function(key, editor)
		{
			var customStyleID = parseInt($(editor).attr('class').split('_').pop(), 10);

			// Check if the ID is higher than any previously checked
			if (customStyleID > highestCustomStyleID)
			{
				highestCustomStyleID = customStyleID;
			}
		});

		// Return
		return parseInt(highestCustomStyleID, 10);
	};

	$(document).bind('slideshowBackendReady', self.init);

	return self;
}();
slideshow_jquery_image_gallery_backend_script.slideshow = function()
{
	var $    = jQuery,
		self = { };

	self.isCurrentPage = false;

	/**
	 *
	 */
	self.init = function()
	{
		if (window.pagenow === 'slideshow')
		{
			self.isCurrentPage = true;
		}
	};

	$(document).bind('slideshowBackendReady', self.init);

	return self;
}();



slideshow_jquery_image_gallery_backend_script.slideshow.slideManager = function()
{
	var $    = jQuery,
		self = { };

	self.uploader = null;

	/**
	 *
	 */
	self.init = function()
	{
		if (slideshow_jquery_image_gallery_backend_script.slideshow.isCurrentPage)
		{
			// New 3.5 uploader
			self.activateUploader();

			self.activate();

			// Old pre-3.5 uploader
			self.activeOldUploader();
		}
	};

	/**
	 * Activates the WordPress 3.5 uploader.
	 */
	self.activateUploader = function()
	{
		$('.slideshow-insert-image-slide').on('click', function(event)
		{
			event.preventDefault();

			var uploaderTitle,
				externalData;

			// Reopen file frame if it has already been created
			if (self.uploader)
			{
				self.uploader.open();

				return;
			}

			externalData = window.slideshow_jquery_image_gallery_backend_script_slideshow;

			uploaderTitle = '';

			if (typeof externalData === 'object' &&
				typeof externalData.localization === 'object' &&
				externalData.localization.uploaderTitle !== undefined &&
				externalData.localization.uploaderTitle.length > 0)
			{
				uploaderTitle = externalData.localization.uploaderTitle;
			}

			// Create the uploader
			self.uploader = wp.media.frames.slideshow_jquery_image_galler_uploader = wp.media({
				frame   : 'select',
				title   : uploaderTitle,
				multiple: true,
				library :
				{
					type: 'image'
				}
			});

			// Create image slide on select
			self.uploader.on('select', function()
			{
				var attachments = self.uploader.state().get('selection').toJSON(),
					attachment,
					attachmentID;

				for (attachmentID in attachments)
				{
					if (!attachments.hasOwnProperty(attachmentID))
					{
						continue;
					}

					attachment = attachments[attachmentID];

					self.insertImageSlide(attachment.id, attachment.title, attachment.description, attachment.url, attachment.alt);
				}
			});

			self.uploader.open();
		});
	};

	/**
	 * Activates the pre-3.5 uploader for backwards compatibility.
	 */
	self.activeOldUploader = function()
	{
		var $popup           = $('#slideshow-slide-inserter-popup'),
			$popupBackground = $('#slideshow-slide-inserter-popup-background'),
			$searchBar       = $popup.find('#search');

		// Make the black background stretch all the way down the document
		$popupBackground.height($(document).outerHeight(true));

		// Center the popup in the window
		$popup.css({
			'top': parseInt(($(window).height() / 2) - ($popup.outerHeight(true) / 2), 10),
			'left': parseInt(($(window).width() / 2) - ($popup.outerWidth(true) / 2), 10)
		});

		// Focus on search bar
		$searchBar.focus();

		// Preload attachments
		self.getSearchResults();

		// Close popup when clicked on cross or background
		$popup.find('#close').click(self.closePopup);
		$popupBackground     .click(self.closePopup);

		// Send ajax request on click of the search button
		$popup.find('#search-submit').click(self.getSearchResults);

		// Make the 'enter' key do the same as the search button
		$searchBar.keypress(function(event)
		{
			if (event.which == 13)
			{
				event.preventDefault();

				self.getSearchResults();
			}
		});

		// Open popup by click on button
		$('#slideshow-insert-image-slide').click(function()
		{
			$popup          .css({ display: 'block' });
			$popupBackground.css({ display: 'block' });
		});

		// Insert text slide into the sortable list when the Insert Text Slide button is clicked
		$('#slideshow-insert-text-slide').click(self.insertTextSlide);

		// Insert video slide into the sortable list when the Insert Video Slide button is clicked
		$('#slideshow-insert-video-slide').click(self.insertVideoSlide);

		// Call self.deleteSlide on click
		$('.slideshow-delete-slide').click(function(event)
		{
			self.deleteSlide($(event.currentTarget).closest('.sortable-slides-list-item'));
		});
	};

	/**
	 * Activate edit slideshow functionality.
	 */
	self.activate = function()
	{
		// Index first
		self.indexSlidesOrder();

		// Make list items in the sortables list sortable, exclude elements by using the cancel option
		$('.sortable-slides-list').sortable({
			revert: true,
			placeholder: 'sortable-placeholder',
			forcePlaceholderSize: true,
			stop: function()
			{
				self.indexSlidesOrder();
			},
			cancel: 'input, select, textarea'
		});

		// Add the wp-color-picker plugin to the color fields
		$('.wp-color-picker-field').wpColorPicker({ width: 234 });

		// Open all slides on click
		$('.open-slides-button').on('click', function(event)
		{
			event.preventDefault();

			$('.sortable-slides-list .sortable-slides-list-item').each(function(listItemIndex, listItem)
			{
				var $listItem = $(listItem);

				if (!$listItem.find('.inside').is(':visible'))
				{
					$listItem.find('.handlediv').trigger('click');
				}
			});
		});

		// Close all slides on click
		$('.close-slides-button').on('click', function(event)
		{
			event.preventDefault();

			$('.sortable-slides-list .sortable-slides-list-item').each(function(listItemIndex, listItem)
			{
				var $listItem = $(listItem);

				if ($listItem.find('.inside').is(':visible'))
				{
					$listItem.find('.handlediv').trigger('click');
				}
			});
		});
	};

	/**
	 * Deletes slide from DOM
	 *
	 * @param $slide
	 */
	self.deleteSlide = function($slide)
	{
		var confirmMessage = 'Are you sure you want to delete this slide?',
			externalData   = window.slideshow_jquery_image_gallery_backend_script_slideshow;

		if (typeof externalData === 'object' &&
			typeof externalData.localization === 'object' &&
			externalData.localization.confirm !== undefined &&
			externalData.localization.confirm.length > 0)
		{
			confirmMessage = externalData.localization.confirm;
		}

		if(!confirm(confirmMessage))
		{
			return;
		}

		// Remove slide from DOM
		$slide.remove();
	};

	/**
	 * Loop through sortable slides list items, setting slide orders
	 */
	self.indexSlidesOrder = function()
	{
		// Loop through sortables
		$('.sortable-slides-list .sortable-slides-list-item').each(function(slideID, slide)
		{
			// Loop through all fields to set their name attributes with the new index
			$.each($(slide).find('input, select, textarea'), function(key, input)
			{
				var $input = $(input),
					name   = $input.attr('name');

				if (name === undefined ||
					name.length <= 0)
				{
					return;
				}

				name = name.replace(/[\[\]']+/g, ' ').split(' ');

				// Put name with new order ID back on the page
				$input.attr('name', name[0] + '[' + (slideID + 1) + '][' + name[2] + ']');
			});
		});
	};

	/**
	 * Sends an ajax post request with the search query and print retrieved html to the results table.
	 *
	 * If offset is set, append data to data that is already there
	 *
	 * @param offset (optional, defaults to 0)
	 */
	self.getSearchResults = function(offset)
	{
		var $popup        = $('#slideshow-slide-inserter-popup'),
			$resultsTable = $popup.find('#results'),
			attachmentIDs = [];

		offset = parseInt(offset, 10);

		if (isNaN(offset))
		{
			offset = 0;

			$resultsTable.html('');
		}

		$.each($resultsTable.find('.result-table-row'), function(key, tr)
		{
			attachmentIDs.push(parseInt($(tr).attr('data-attachment-id'), 10));
		});

		$.post(
			window.ajaxurl,
			{
				action       : 'slideshow_slide_inserter_search_query',
				search       : $popup.find('#search').attr('value'),
				offset       : offset,
				attachmentIDs: attachmentIDs
			},
			function(response)
			{
				var $loadMoreResultsButton;

				// Fill table
				$resultsTable.append(response);

				// When the insert button is clicked, the function to build a slide should be called. Unbind first so old entries don't have the event twice.
				$resultsTable.find('.insert-attachment').unbind('click').click(function(event)
				{
					var $tr = $(event.currentTarget).closest('tr');

					self.insertImageSlide(
						$tr.attr('data-attachment-id'),
						$tr.find('.title').text(),
						$tr.find('.description').text(),
						$tr.find('.image img').attr('src'),
						$tr.find('.title').text()
					);
				});

				// Load more results on click of the 'Load more results' button
				$loadMoreResultsButton = $('.load-more-results');
				if($loadMoreResultsButton)
				{
					$loadMoreResultsButton.click(function(event)
					{
						// Get offset
						var $this     = $(event.currentTarget),
							newOffset = $this.attr('data-offset');

						$this.closest('tr').hide();

						if (isNaN(parseInt(newOffset, 10)))
						{
							return;
						}

						self.getSearchResults(newOffset);
					});
				}
			}
		);
	};

	/**
	 * Inserts image slide into the slides list
	 *
	 * @param id
	 * @param title
	 * @param description
	 * @param src
	 * @param alternativeText
	 */
	self.insertImageSlide = function(id, title, description, src, alternativeText)
	{
		// Find and clone the image slide template
		var $imageSlide = $('.image-slide-template').find('.sortable-slides-list-item').clone(true, true);

		// Fill slide with data
		$imageSlide.find('.attachment').attr('src', src);
		$imageSlide.find('.attachment').attr('title', title);
		$imageSlide.find('.attachment').attr('alt', alternativeText);
		$imageSlide.find('.title').attr('value', title);
		$imageSlide.find('.description').html(description);
		$imageSlide.find('.alternativeText').attr('value', alternativeText);
		$imageSlide.find('.postId').attr('value', id);

		// Set names to be saved to the database
		$imageSlide.find('.title').attr('name', 'slides[0][title]');
		$imageSlide.find('.titleElementTagID').attr('name', 'slides[0][titleElementTagID]');
		$imageSlide.find('.description').attr('name', 'slides[0][description]');
		$imageSlide.find('.descriptionElementTagID').attr('name', 'slides[0][descriptionElementTagID]');
		$imageSlide.find('.url').attr('name', 'slides[0][url]');
		$imageSlide.find('.urlTarget').attr('name', 'slides[0][urlTarget]');
		$imageSlide.find('.alternativeText').attr('name', 'slides[0][alternativeText]');
        $imageSlide.find('.noFollow').attr('name', 'slides[0][noFollow]');
		$imageSlide.find('.type').attr('name', 'slides[0][type]');
		$imageSlide.find('.postId').attr('name', 'slides[0][postId]');

		// Put slide in the sortables list.
		$('.sortable-slides-list').prepend($imageSlide);

		// Reindex
		self.indexSlidesOrder();
	};

	/**
	 * Inserts text slide into the slides list
	 */
	self.insertTextSlide = function()
	{
		// Find and clone the text slide template
		var $textSlide = $('.text-slide-template').find('.sortable-slides-list-item').clone(true, true);

		// Set names to be saved to the database
		$textSlide.find('.title').attr('name', 'slides[0][title]');
		$textSlide.find('.titleElementTagID').attr('name', 'slides[0][titleElementTagID]');
		$textSlide.find('.description').attr('name', 'slides[0][description]');
		$textSlide.find('.descriptionElementTagID').attr('name', 'slides[0][descriptionElementTagID]');
		$textSlide.find('.textColor').attr('name', 'slides[0][textColor]');
		$textSlide.find('.color').attr('name', 'slides[0][color]');
		$textSlide.find('.url').attr('name', 'slides[0][url]');
		$textSlide.find('.urlTarget').attr('name', 'slides[0][urlTarget]');
        $textSlide.find('.noFollow').attr('name', 'slides[0][noFollow]');
		$textSlide.find('.type').attr('name', 'slides[0][type]');

		// Add color picker
		$textSlide.find('.color, .textColor').wpColorPicker();

		// Put slide in the sortables list.
		$('.sortable-slides-list').prepend($textSlide);

		// Reindex slide orders
		self.indexSlidesOrder();
	};

	/**
	 * Inserts video slide into the slides list
	 */
	self.insertVideoSlide = function()
	{
		// Find and clone the video slide template
		var $videoSlide = $('.video-slide-template').find('.sortable-slides-list-item').clone(true, true);

		// Set names to be saved to the database
		$videoSlide.find('.videoId').attr('name', 'slides[0][videoId]');
		$videoSlide.find('.showRelatedVideos').attr('name', 'slides[0][showRelatedVideos]');
		$videoSlide.find('.type').attr('name', 'slides[0][type]');

		// Put slide in the sortables list.
		$('.sortable-slides-list').prepend($videoSlide);

		// Reindex slide orders
		self.indexSlidesOrder();
	};

	/**
	 * Closes popup
	 */
	self.closePopup = function()
	{
		$('#slideshow-slide-inserter-popup, #slideshow-slide-inserter-popup-background').css({ display: 'none' });
	};

	$(document).bind('slideshowBackendReady', self.init);

	return self;
}();
slideshow_jquery_image_gallery_backend_script.settingsProfile = function()
{
	var $    = jQuery,
		self = { };

	self.isCurrentPage = false;

	/**
	 *
	 */
	self.init = function()
	{
		if (window.pagenow === 'slideshow_sett_prof')
		{
			self.isCurrentPage = true;

			self.activateSettingsVisibilityDependency();
		}
	};

	/**
	 * Set fields, that depend on another field being a certain value, to show when that certain field becomes a certain
	 * value and to hide when that certain fields loses that certain value.
	 */
	self.activateSettingsVisibilityDependency = function()
	{
		$('.depends-on-field-value').each(function(key, field)
		{
			var $field     = $(field),
				attributes = $field.attr('class').split(' '),
				$tr        = $field.closest('tr');

			// Check whether or not field should be shown
			if ($('input[name="' + attributes[1] + '"]:checked').val() == attributes[2])
			{
				$tr.show();
			}
			else
			{
				$tr.hide();
			}

			// On change of the field that the current field depends on, set field's visibility
			$('input[name="' + attributes[1] + '"]').change(attributes, function(event)
			{
				var $tr = $('.' + attributes[3]).closest('tr');

				if ($(event.currentTarget).val() == attributes[2])
				{
					self.animateElementVisibility($tr, true);
				}
				else
				{
					self.animateElementVisibility($tr, false);
				}
			});
		});
	};

	/**
	 * Animate an element's visibility
	 *
	 * @param element
	 * @param setVisible Optional, defaults to the current opposite when left empty.
	 */
	self.animateElementVisibility = function(element, setVisible)
	{
		var $element = $(element);

		if (setVisible === undefined)
		{
			// Finish animation before checking visibility
			$element.stop(true, true);

			setVisible = !$element.is(':visible');
		}

		if (setVisible)
		{
			$element.stop(true, true).show().css('background-color', '#c0dd52');

			setTimeout(
				function()
				{
					$element.stop(true, true).animate({ 'background-color': 'transparent' }, 1500);
				},
				500
			);
		}
		else
		{
			$element.stop(true, true).css('background-color', '#d44f6e');

			setTimeout(
				function()
				{
					$element.stop(true, true).hide(1500, function()
					{
						$element.css('background-color', 'transparent');
					});
				},
				500
			);
		}
	};

	$(document).bind('slideshowBackendReady', self.init);

	return self;
}();
slideshow_jquery_image_gallery_backend_script.shortcode = function()
{
	var $    = jQuery,
		self = { };

	/**
	 *
	 */
	self.init = function()
	{
		self.activateShortcodeInserter();
	};

	/**
	 *
	 */
	self.activateShortcodeInserter = function()
	{
		$('.insertSlideshowShortcodeSlideshowInsertButton').click(function()
		{
			var undefinedSlideshowMessage = 'No slideshow selected.',
				shortcode                 = 'slideshow_deploy',
				slideshowID               = parseInt($('#insertSlideshowShortcodeSlideshowSelect').val(), 10),
				externalData              = window.slideshow_jquery_image_gallery_backend_script_shortcode;

			if (typeof externalData === 'object')
			{
				if (typeof externalData.data === 'object' &&
					externalData.data.shortcode !== undefined &&
					externalData.data.shortcode.length > 0)
				{
					shortcode = externalData.data.shortcode;
				}

				if (typeof externalData.localization === 'object' &&
					externalData.localization.undefinedSlideshow !== undefined &&
					externalData.localization.undefinedSlideshow.length > 0)
				{
					undefinedSlideshowMessage = externalData.localization.undefinedSlideshow;
				}
			}

			if (isNaN(slideshowID))
			{
				alert(undefinedSlideshowMessage);

				return false;
			}

			send_to_editor('[' + shortcode + ' id=\'' + slideshowID + '\']');

			tb_remove();

			return true;
		});

		$('.insertSlideshowShortcodeCancelButton').click(function()
		{
			tb_remove();

			return false;
		});
	};

	$(document).bind('slideshowBackendReady', self.init);

	return self;
}();